# TODO:
# * Android

name: CI
on:
  push:
    branches:
    - master
    paths-ignore:
    - 'LICENSE.txt'
    - '**.md'
    - 'specs/**'
  pull_request:
    paths-ignore:
    - 'LICENSE.txt'
    - '**.md'
    - 'specs/**'
jobs:
  Baseline:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-latest]
        cc: [[gcc, g++], [clang, clang++]]
        py: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']  # Updated Python versions
        exclude:
          - os: ubuntu-20.04
            py: '3.13'  # Python 3.13 not available on Ubuntu 20.04
          - os: ubuntu-22.04
            cc: [clang, clang++]  # Disable due to https://sourceware.org/bugzilla/show_bug.cgi?id=28981
          - os: ubuntu-latest
            cc: [clang, clang++]  # Ditto
    runs-on: ${{ matrix.os }}
    env:
      CC: ${{ matrix.cc[0] }}
      CXX: ${{ matrix.cc[1] }}
      PYTHON: python
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.py }}
    - name: Install deps
      run: |
        sudo apt-get update
        python -m pip install --upgrade pip
    - name: Run tests
      run: scripts/travis.sh
  PyPy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up PyPy
      uses: actions/setup-python@v5
      with:
        python-version: 'pypy-3.10'
    - name: Run tests
      env:
        PYTHON: python
      run: scripts/travis.sh
  Pylint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install deps
      run: python -m pip install pylint
    - name: Run tests
      run: |
        pylint implib-gen.py
        pylint scripts/ld
  black:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install deps
      run: python -m pip install black
    - name: Check formatting
      run: black --check --diff implib-gen.py scripts/
  Coverage:
    runs-on: ubuntu-latest
    env:
      COVERAGE: 1
      PYTHON: 'coverage run -a'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install deps
      run: python -m pip install coverage
    - name: Run tests
      run: scripts/travis.sh
    - name: Generate coverage report
      run: |
        for t in tests/*; do
          if test -d $t -a -f $t/.coverage; then
            (cd $t && coverage xml && coverage report)
          fi
        done
  cmake:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install binutils
        echo "/opt/homebrew/opt/binutils/bin" >> $GITHUB_PATH
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    - name: Build
      run: cmake --build build --parallel
    - name: Test
      run: cd build && ctest --output-on-failure --parallel
  avx:
    runs-on: ubuntu-latest
    env:
      CFLAGS: -mavx
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Run tests
      run: scripts/travis.sh
#  avx2:
#    runs-on: ubuntu-latest
#    env:
#      CFLAGS: -mavx2 -mavx512f
#    steps:
#    - uses: actions/checkout@v4
#    - name: Run tests
#      run: scripts/travis.sh
  musl:
    runs-on: ubuntu-latest
    env:
      CC: musl-gcc
    steps:
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install musl-tools
    - name: Run tests
      run: scripts/travis.sh
  # TODO: test on llvm-libc when it supports dlfcn
  x86:
    runs-on: ubuntu-latest
    env:
      ARCH: i386-linux-gnueabi
    steps:
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install gcc-multilib g++-multilib
    - name: Run tests
      run: scripts/travis.sh
  arm-arm:
    runs-on: ubuntu-latest
    env:
      ARCH: arm-linux-gnueabi
      CFLAGS: -marm
    steps:
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install qemu-user gcc-arm-linux-gnueabi g++-arm-linux-gnueabi binutils-arm-linux-gnueabi libc6-armel-cross libc6-dev-armel-cross
    - name: Run tests
      run: scripts/travis.sh
  arm-thumb:
    runs-on: ubuntu-latest
    env:
      ARCH: arm-linux-gnueabi
      CFLAGS: -mthumb
    steps:
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install qemu-user gcc-arm-linux-gnueabi g++-arm-linux-gnueabi binutils-arm-linux-gnueabi libc6-armel-cross libc6-dev-armel-cross
    - name: Run tests
      run: scripts/travis.sh
  armhf-arm:
    runs-on: ubuntu-latest
    env:
      ARCH: arm-linux-gnueabihf
      CFLAGS: -marm
    steps:
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install qemu-user gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf libc6-armhf-cross libc6-dev-armhf-cross
    - name: Run tests
      run: scripts/travis.sh
  armhf-thumb:
    runs-on: ubuntu-latest
    env:
      ARCH: arm-linux-gnueabihf
      CFLAGS: -mthumb
    steps:
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install qemu-user gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf libc6-armhf-cross libc6-dev-armhf-cross
    - name: Run tests
      run: scripts/travis.sh
  aarch64:
    runs-on: ubuntu-latest
    env:
      ARCH: aarch64-linux-gnueabi
    steps:
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install qemu-user gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu libc6-arm64-cross libc6-dev-arm64-cross
    - name: Run tests
      run: scripts/travis.sh
  mipsel:
    runs-on: ubuntu-latest
    env:
      ARCH: mipsel-linux-gnu
    steps:
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install qemu-user gcc-mipsel-linux-gnu g++-mipsel-linux-gnu binutils-mipsel-linux-gnu libc6-mipsel-cross libc6-dev-mipsel-cross
    - name: Run tests
      run: scripts/travis.sh
  mips64el:
    runs-on: ubuntu-latest
    env:
      ARCH: mips64el-linux-gnu
    steps:
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install qemu-user gcc-mips64el-linux-gnuabi64 g++-mips64el-linux-gnuabi64 binutils-mips64el-linux-gnuabi64 libc6-mips64el-cross libc6-dev-mips64el-cross
    - name: Run tests
      run: scripts/travis.sh
  powerpc64:
    runs-on: ubuntu-latest
    env:
      ARCH: powerpc64-linux-gnu
    steps:
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install qemu-user gcc-powerpc64-linux-gnu g++-powerpc64-linux-gnu binutils-powerpc64-linux-gnu libc6-ppc64-powerpc-cross libc6-dev-ppc64-powerpc-cross
    - name: Run tests
      run: scripts/travis.sh
  powerpc64le:
    runs-on: ubuntu-latest
    env:
      ARCH: powerpc64le-linux-gnu
    steps:
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install qemu-user gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu binutils-powerpc64le-linux-gnu libc6-ppc64el-cross libc6-dev-ppc64el-cross
    - name: Run tests
      run: scripts/travis.sh
  riscv64:
    runs-on: ubuntu-latest
    env:
      ARCH: riscv64-linux-gnu
    steps:
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install qemu-user gcc-riscv64-linux-gnu g++-riscv64-linux-gnu binutils-riscv64-linux-gnu libc6-riscv64-cross libc6-dev-riscv64-cross
    - name: Run tests
      run: scripts/travis.sh
  freebsd:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: vmactions/freebsd-vm@v1
      with:
        usesh: true
        copyback: false
        run: |
          scripts/install-freebsd-prereqs.sh
          scripts/travis.sh
